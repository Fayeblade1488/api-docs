openapi: 3.0.0
info:
  title: "Venice.ai API"
  description: "The Venice.ai REST API."
  version: 1.0.0
  termsOfService: "https://venice.ai/legal/tos"
externalDocs:
  description: "Venice.ai API documentation"
  url: "https://docs.venice.ai"
servers:
  - url: "https://api.venice.ai/api/v1"
tags:
  - name: Chat
    description: "Given a list of messages comprising a conversation, the model will return a response."
  - name: Models
    description: "List and describe the various models available in the API."
  - name: Image
    description: "Generate and manipulate images using AI models."
security:
  - BearerAuth: []
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      tags:
        - Chat
      summary: /api/v1/chat/completions
      description: "Run text inference based on the supplied parameters."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  description: "ID of the model to use, or the model trait to select the model from."
                  example: [dolphin-2.9.2-qwen2-72b, default, most_intelligent]
                messages:
                  type: array
                  description: "A list of messages comprising the conversation so far."
                  minItems: 1
                  items:
                    {
                      oneOf:
                        [
                          {
                            type: object,
                            properties:
                              {
                                role:
                                  {
                                    type: string,
                                    enum: [system],
                                    description: "The role of the messages author",
                                  },
                                content:
                                  {
                                    oneOf:
                                      [
                                        {
                                          type: string,
                                          description: "The contents of the system message",
                                        },
                                        {
                                          type: array,
                                          description: "An array of content parts with a defined type",
                                          items:
                                            {
                                              type: object,
                                              properties:
                                                {
                                                  type:
                                                    {
                                                      type: string,
                                                      enum: [text],
                                                    },
                                                  text: { type: string },
                                                },
                                            },
                                        },
                                      ],
                                  },
                                name:
                                  {
                                    type: string,
                                    description: "Optional name for the participant",
                                  },
                              },
                            required: [role, content],
                          },
                          {
                            type: object,
                            properties:
                              {
                                role:
                                  {
                                    type: string,
                                    enum: [assistant],
                                    description: "The role of the model",
                                  },
                                content:
                                  {
                                    oneOf:
                                      [
                                        {
                                          type: string,
                                          description: "The historical context from the model",
                                        },
                                        {
                                          type: array,
                                          description: "An array of content parts with a defined type",
                                          items:
                                            {
                                              type: object,
                                              properties:
                                                {
                                                  type:
                                                    {
                                                      type: string,
                                                      enum: [text],
                                                    },
                                                  text: { type: string },
                                                },
                                            },
                                        },
                                      ],
                                  },
                                name:
                                  {
                                    type: string,
                                    description: "Optional name for the participant",
                                  },
                              },
                            required: [role, content],
                          },
                          {
                            type: object,
                            properties:
                              {
                                role:
                                  {
                                    type: string,
                                    enum: [user],
                                    description: "The role of the messages author",
                                  },
                                content:
                                  {
                                    oneOf:
                                      [
                                        {
                                          type: string,
                                          description: "The contents of the user message",
                                        },
                                        {
                                          type: array,
                                          description: "An array of content parts",
                                          items:
                                            {
                                              type: object,
                                              properties:
                                                {
                                                  type:
                                                    {
                                                      type: string,
                                                      enum: [text],
                                                    },
                                                  text: { type: string },
                                                },
                                            },
                                        },
                                      ],
                                  },
                                name:
                                  {
                                    type: string,
                                    description: "Optional name for the participant",
                                  },
                              },
                            required: [role, content],
                          },
                        ],
                    }
                  nullable: true
                prompt:
                  description: >
                    The prompt(s) to generate completions for, encoded as a string,
                    array of strings, array of tokens, or array of token arrays.


                    Note that <|endoftext|> is the document separator that the model
                    sees during training, so if a prompt is not specified the model will
                    generate as if from the beginning of a new document.
                  default: <|endoftext|>
                  nullable: true
                  oneOf:
                    - type: string
                      default: ""
                      example: This is a test.
                venice_parameters:
                  type: object
                  properties:
                    {
                      character_slug:
                        {
                          type: "string",
                          description: "The character slug of a Venice.ai Public Character. Will load the character into the context of the inference request.",
                        },
                      include_venice_system_prompt:
                        {
                          type: boolean,
                          description: "Whether to include Venice system prompt in the conversation",
                        },
                    }
                temperature:
                  type: number
                  minimum: 0
                  maximum: 2
                  default: 1
                  description: "What sampling temperature to use. Higher values make output more random, lower values more focused."
                top_p:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 1
                  description: "An alternative to sampling with temperature, called nucleus sampling."
                stream:
                  type: boolean
                  default: false
                  description: "Whether to stream back partial progress as server-sent events."
                stop:
                  description: |
                    Up to 4 sequences where the API will stop generating further tokens.
                  default: null
                  oneOf:
                    - type: string
                      nullable: true
                    - type: array
                      minItems: 1
                      maxItems: 4
                      items:
                        type: string
                max_tokens:
                  type: integer
                  description: "Maximum number of tokens to generate."
                  deprecated: true
                max_completion_tokens:
                  type: integer
                  description: "An upper bound for the number of tokens that can be generated for a completion."
                  nullable: true
                frequency_penalty:
                  type: number
                  default: 0
                  minimum: -2
                  maximum: 2
                  nullable: true
                  description: >
                    Number between -2.0 and 2.0. Positive values penalize new
                    tokens based on their existing frequency in the text so far,
                    decreasing the model's likelihood to repeat the same line
                    verbatim.
                presence_penalty:
                  type: number
                  default: 0
                  minimum: -2
                  maximum: 2
                  nullable: true
                  description: >
                    Number between -2.0 and 2.0. Positive values penalize new tokens
                    based on whether they appear in the text so far, increasing the
                    model's likelihood to talk about new topics.
                tools:
                  type: array
                  description: "A list of tools the model may call."
                  items:
                    {
                      type: object,
                      properties:
                        {
                          type: { type: string, enum: [function] },
                          function:
                            {
                              type: object,
                              properties:
                                {
                                  name:
                                    {
                                      type: string,
                                      description: "The name of the function",
                                    },
                                  description:
                                    {
                                      type: string,
                                      description: "Description of what the function does",
                                    },
                                  parameters:
                                    {
                                      type: object,
                                      description: "The parameters the function accepts",
                                    },
                                  strict:
                                    {
                                      type: boolean,
                                      description: "Whether to enforce strict parameter validation",
                                    },
                                },
                              required: [name],
                            },
                        },
                      required: [function],
                    }
              required:
                - model
                - messages
            examples:
              "Basic chat completion":
                summary: "Simple chat completion request"
                value:
                  model: dolphin-2.9.2-qwen2-72b
                  messages:
                    [{ role: user, content: "What is the capital of France?" }]
              "Chat with venice parameters":
                summary: "Chat completion with Venice parameters"
                value:
                  model: dolphin-2.9.2-qwen2-72b
                  messages:
                    [{ role: user, content: "What is the capital of France?" }]
                  venice_parameters: { include_venice_system_prompt: true }
                  temperature: 0.7
              "Multi-turn conversation":
                summary: "Conversation with multiple messages"
                value:
                  model: dolphin-2.9.2-qwen2-72b
                  messages:
                    [
                      {
                        role: system,
                        content: "You are a helpful assistant that specializes in geography.",
                      },
                      { role: user, content: "What is the capital of France?" },
                      {
                        role: assistant,
                        content: "The capital of France is Paris.",
                      },
                      { role: user, content: "What is its population?" },
                    ]
                  temperature: 0.8
              "Streaming response":
                summary: "Request with streaming enabled"
                value:
                  model: dolphin-2.9.2-qwen2-72b
                  messages:
                    [
                      {
                        role: user,
                        content: "Write a short story about a bear.",
                      },
                    ]
                  stream: true
                  temperature: 0.9
              "Advanced parameters":
                summary: "Using multiple optional parameters"
                value:
                  model: dolphin-2.9.2-qwen2-72b
                  messages:
                    [{ role: user, content: "Explain quantum computing." }]
                  temperature: 0.7
                  top_p: 0.9
                  max_completion_tokens: 500
                  venice_parameters: { include_venice_system_prompt: true }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    {
                      type: string,
                      description: "Unique identifier for the chat completion",
                    }
                  object:
                    {
                      type: string,
                      enum: [chat.completion],
                      description: "The object type",
                    }
                  created:
                    {
                      type: integer,
                      description: "Unix timestamp of when the completion was created",
                    }
                  model:
                    {
                      type: string,
                      description: "The model used for completion",
                    }
                  choices:
                    {
                      type: array,
                      items:
                        {
                          type: object,
                          properties:
                            {
                              index: { type: integer },
                              message:
                                {
                                  type: object,
                                  properties:
                                    {
                                      role: { type: string, enum: [assistant] },
                                      content: { type: string, nullable: true },
                                      refusal: { type: string, nullable: true },
                                      tool_calls:
                                        {
                                          type: array,
                                          items: { type: object },
                                        },
                                    },
                                  required: [role, content, refusal],
                                },
                              finish_reason:
                                { type: string, enum: [stop, length] },
                            },
                          required: [index, message, finish_reason],
                        },
                    }
                  usage:
                    {
                      type: object,
                      properties:
                        {
                          prompt_tokens: { type: integer },
                          completion_tokens: { type: integer },
                          total_tokens: { type: integer },
                        },
                      required:
                        [prompt_tokens, completion_tokens, total_tokens],
                    }
                required:
                  - id
                  - object
                  - created
                  - model
                  - choices
              examples:
                "Basic completion response":
                  summary: "Simple chat completion response"
                  value:
                    {
                      id: chatcmpl-123abc,
                      object: chat.completion,
                      created: 1677652288,
                      model: dolphin-2.9.2-qwen2-72b,
                      choices:
                        [
                          {
                            index: 0,
                            message:
                              {
                                role: assistant,
                                content: "Paris is the capital of France.",
                                refusal: null,
                                tool_calls: [],
                              },
                            finish_reason: stop,
                          },
                        ],
                      usage:
                        {
                          prompt_tokens: 12,
                          completion_tokens: 8,
                          total_tokens: 20,
                        },
                    }
        "400":
          description: "Bad Request. Missing or malformed JSON content."
        "404":
          description: "Model not found. Validate supplied model is active."
  /image/generate:
    post:
      operationId: generateImage
      summary: "Generate an image based on input parameters"
      tags:
        - Image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  description: "The model ID to use for generation"
                prompt:
                  type: string
                  description: "The description or prompt for the image"
                  maxLength: 1500
                width:
                  type: number
                  description: "Width of the generated image"
                  default: 1024
                height:
                  type: number
                  description: "Height of the generated image"
                  default: 1024
                steps:
                  type: number
                  description: "Number of inference steps"
                  default: 30
                  maximum: 50
                hide_watermark:
                  type: boolean
                  description: "Whether to hide the watermark"
                  default: false
                return_binary:
                  type: boolean
                  description: "Whether to return binary image data instead of base64"
                  default: false
                seed:
                  type: number
                  description: "Random seed for generation"
                cfg_scale:
                  type: number
                  description: "CFG scale parameter"
                style_preset:
                  type: string
                  description: "Style preset to use"
                  enum:
                    - "3D Model"
                    - "Analog Film"
                    - "Anime"
                    - "Cinematic"
                    - "Comic Book"
                    - "Craft Clay"
                    - "Digital Art"
                    - "Enhance"
                    - "Fantasy Art"
                    - "Isometric Style"
                    - "Line Art"
                    - "Lowpoly"
                    - "Neon Punk"
                    - "Origami"
                    - "Photographic"
                    - "Pixel Art"
                    - "Texture"
                    - "Advertising"
                    - "Food Photography"
                    - "Real Estate"
                    - "Abstract"
                    - "Cubist"
                    - "Graffiti"
                    - "Hyperrealism"
                    - "Impressionist"
                    - "Pointillism"
                    - "Pop Art"
                    - "Psychedelic"
                    - "Renaissance"
                    - "Steampunk"
                    - "Surrealist"
                    - "Typography"
                    - "Watercolor"
                    - "Fighting Game"
                    - "GTA"
                    - "Super Mario"
                    - "Minecraft"
                    - "Pokemon"
                    - "Retro Arcade"
                    - "Retro Game"
                    - "RPG Fantasy Game"
                    - "Strategy Game"
                    - "Street Fighter"
                    - "Legend of Zelda"
                    - "Architectural"
                    - "Disco"
                    - "Dreamscape"
                    - "Dystopian"
                    - "Fairy Tale"
                    - "Gothic"
                    - "Grunge"
                    - "Horror"
                    - "Minimalist"
                    - "Monochrome"
                    - "Nautical"
                    - "Space"
                    - "Stained Glass"
                    - "Techwear Fashion"
                    - "Tribal"
                    - "Zentangle"
                    - "Collage"
                    - "Flat Papercut"
                    - "Kirigami"
                    - "Paper Mache"
                    - "Paper Quilling"
                    - "Papercut Collage"
                    - "Papercut Shadow Box"
                    - "Stacked Papercut"
                    - "Thick Layered Papercut"
                    - "Alien"
                    - "Film Noir"
                    - "HDR"
                    - "Long Exposure"
                    - "Neon Noir"
                    - "Silhouette"
                    - "Tilt-Shift"
                negative_prompt:
                  type: string
                  description: "Negative prompt for generation"
                  maxLength: 1500
                safe_mode:
                  type: boolean
                  description: "Enable safe venice mode. Adult content will be returned blurred and the x-venice-is-blurred header will be set to true."
                  default: false
              required:
                - model
                - prompt
      responses:
        "200":
          description: "Successfully generated image"
          content:
            application/json:
              schema:
                type: object
                properties:
                  request:
                    { type: string, description: "Base64 encoded request data" }
                  images:
                    {
                      type: array,
                      items:
                        {
                          type: string,
                          description: "Base64 encoded image data",
                        },
                    }
                  timing:
                    {
                      type: object,
                      description: "Inference timing information",
                    }
            image/png:
              schema:
                type: string
                format: binary
                description: "Raw image data when return_binary is true"
        "400":
          description: "Invalid request parameters"
        "401":
          description: "Authentication failed"
        "404":
          description: "Model not found"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
  /image/upscale:
    post:
      operationId: upscaleImage
      tags:
        - Image
      summary: /api/v1/image/upscale
      description: "Upscale an image based on the supplied parameters."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: "The image to upscale. Must be a PNG file."
              required:
                - image
      responses:
        "200":
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        "400":
          description: "Bad request. Will be returned if the content-type is not multipart/form-data or image is not a valid PNG."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      oneOf:
                        [
                          {
                            type: string,
                            enum:
                              [
                                "No image provided",
                                "The uploaded file is corrupted or not readable",
                              ],
                          },
                          {
                            type: array,
                            items:
                              {
                                type: object,
                                description: "Zod validation errors for image dimensions",
                              },
                          },
                        ],
                    }
                  message:
                    { type: string, description: "Additional error context" }
                  receivedContentType:
                    {
                      type: string,
                      description: "The content type that was received when invalid",
                    }
        "401":
          description: "Authentication failed"
        "413":
          description: "Supplied image is too large. Limit is 5MB."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, enum: ["File too large"] }
        "415":
          description: "Unsupported Media Type"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, enum: ["Invalid Content-Type"] }
                  message: { type: string }
                  receivedContentType: { type: string }
        "429":
          description: "Rate limit exceeded"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, enum: ["Rate limit exceeded"] }
        "500":
          description: "Error running inference."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, enum: ["Inference failed"] }
        "503":
          description: "Model at capacity."
  /image/styles:
    get:
      tags:
        - Image
      summary: /api/v1/image/styles
      description: "Returns a list of available image styles to use in the /api/v1/image/generate endpoint."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object: { type: string, enum: [list] }
                  data: { type: array, items: { type: string } }
                required:
                  - object
                  - data
              examples:
                default:
                  summary: "List of available image styles"
                  value: { object: list, data: ["3D Model", "Analog Film"] }
  /models:
    get:
      operationId: listModels
      tags:
        - Models
      summary: /api/v1/models
      description: "Returns a list of available models supported by the Venice.ai API for both text and image inference."
      parameters:
        - in: query
          name: type
          required: false
          description: "Filter models by type"
          schema:
            type: string
            enum: [text, image]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object: { type: string, enum: [list] }
                  data:
                    {
                      type: array,
                      items:
                        {
                          type: object,
                          required: [id, type, object, created, owned_by],
                          properties:
                            {
                              id:
                                {
                                  type: string,
                                  description: "The model identifier, which can be referenced in the API endpoints.",
                                },
                              type:
                                {
                                  type: string,
                                  description: "The type of the model.",
                                  enum: [text, image],
                                },
                              object:
                                {
                                  type: string,
                                  description: 'The object type, which is always "model".',
                                  enum: [model],
                                },
                              created:
                                {
                                  type: integer,
                                  description: "The Unix timestamp (in seconds) when the model was created.",
                                },
                              owned_by:
                                {
                                  type: string,
                                  description: "The organization that owns the model.",
                                },
                              model_spec:
                                {
                                  type: object,
                                  description: "Specific model attributes that are unique to the model.",
                                  properties:
                                    {
                                      availableContextTokens:
                                        {
                                          type: integer,
                                          description: "The context length supported by the model. Only applicable for text models.",
                                        },
                                      traits:
                                        {
                                          type: array,
                                          description: "Traits that apply to this model. You can specify a trait to auto-select a model vs. specifying the model ID in your request to avoid breakage as Venice updates and iterates on its models.",
                                          items: { type: string },
                                          nullable: true,
                                        },
                                    },
                                },
                            },
                        },
                    }
                required:
                  - object
                  - data
              examples:
                default:
                  summary: "List of available models"
                  value:
                    {
                      object: list,
                      data:
                        [
                          {
                            id: dolphin-2.9.2-qwen2-72b,
                            object: model,
                            created: 1699000000,
                            owned_by: venice.ai,
                            type: text,
                            model_spec:
                              {
                                availableContextTokens: 32768,
                                traits: [most_intelligent, default],
                              },
                          },
                          {
                            id: sdxl-1.0,
                            object: model,
                            created: 1699000000,
                            owned_by: venice.ai,
                            type: image,
                            model_spec: { traits: [default] },
                          },
                        ],
                    }
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      type: object,
                      properties:
                        {
                          code: { type: string, nullable: true },
                          message: { type: string, nullable: false },
                          param: { type: string, nullable: true },
                          type: { type: string, nullable: false },
                        },
                      required: [type, message, param, code],
                    }
                required:
                  - error
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
